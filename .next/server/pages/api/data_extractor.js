"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/data_extractor";
exports.ids = ["pages/api/data_extractor"];
exports.modules = {

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("openai");

/***/ }),

/***/ "(api)/./pages/api/data_extractor.tsx":
/*!**************************************!*\
  !*** ./pages/api/data_extractor.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(openai__WEBPACK_IMPORTED_MODULE_0__);\n\nconst configuration = new openai__WEBPACK_IMPORTED_MODULE_0__.Configuration({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIApi(configuration);\n/* harmony default export */ async function __WEBPACK_DEFAULT_EXPORT__(req, res) {\n    if (!configuration.apiKey) {\n        res.status(500).json({\n            error: {\n                message: \"OpenAI API key not configured, please follow instructions in README.md\"\n            }\n        });\n        return;\n    }\n    const narrative = req.body.narrative || \"\"; //animal --> case_note narrative\n    if (narrative.trim().length === 0) {\n        res.status(400).json({\n            error: {\n                message: \"Please enter a valid narrative\"\n            }\n        });\n        return;\n    }\n    try {\n        const completion = await openai.createCompletion({\n            model: \"text-davinci-002\",\n            prompt: generatePrompt(narrative),\n            temperature: 0.5,\n            max_tokens: 2000,\n            top_p: 1,\n            frequency_penalty: 0,\n            presence_penalty: 0\n        });\n        res.status(200).json({\n            result: completion.data.choices[0].text\n        });\n    } catch (error) {\n        // Consider adjusting the error handling logic for your use case\n        if (error.response) {\n            console.error(error.response.status, error.response.data);\n            res.status(error.response.status).json(error.response.data);\n        } else {\n            console.error(`Error with OpenAI API request: ${error.message}`);\n            res.status(2000).json({\n                error: {\n                    message: \"An error occurred during your request.\"\n                }\n            });\n        }\n    }\n}\nfunction generatePrompt(narrative) {\n    return `Using en_core_sci_lg version 0.5.1, \n  identify and classify the data found in a patient case narrative ${narrative}\n  based on the labels SYMPTOMS, MEDICAL_HISTORY, PHYSICAL_EXAM, MEDICATION, TREATMENT, SOCIAL_FACTOR. \n  Return the result as a dictionary with the labels as keys (with each key enclosed in double qoutes) and list of data as values (with each value enclosed in double qoutes). If the label has no data assign an empty list as its value.`;\n} // function generatePrompt(animal) {\n //   const capitalizedAnimal =\n //     animal[0].toUpperCase() + animal.slice(1).toLowerCase();\n //   return `Suggest three names for an animal that is a superhero.\n // Animal: Cat\n // Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline\n // Animal: Dog\n // Names: Ruff the Protector, Wonder Canine, Sir Barks-a-Lot\n // Animal: ${capitalizedAnimal}\n // Names:`;\n // }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZGF0YV9leHRyYWN0b3IudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRDtBQUVsRCxNQUFNRSxnQkFBZ0IsSUFBSUYsaURBQWFBLENBQUM7SUFDdENHLFFBQVFDLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztBQUNwQztBQUNBLE1BQU1DLFNBQVMsSUFBSU4sNkNBQVNBLENBQUNDO0FBRTdCLDZCQUFlLDBDQUFnQk0sR0FBRyxFQUFFQyxHQUFHLEVBQUU7SUFDdkMsSUFBSSxDQUFDUCxjQUFjQyxNQUFNLEVBQUU7UUFDekJNLElBQUlDLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDbkJDLE9BQU87Z0JBQ0xDLFNBQVM7WUFDWDtRQUNGO1FBQ0E7SUFDRixDQUFDO0lBRUQsTUFBTUMsWUFBWU4sSUFBSU8sSUFBSSxDQUFDRCxTQUFTLElBQUksSUFBSSxnQ0FBZ0M7SUFDNUUsSUFBSUEsVUFBVUUsSUFBSSxHQUFHQyxNQUFNLEtBQUssR0FBRztRQUNqQ1IsSUFBSUMsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUNuQkMsT0FBTztnQkFDTEMsU0FBUztZQUNYO1FBQ0Y7UUFDQTtJQUNGLENBQUM7SUFFRCxJQUFJO1FBQ0YsTUFBTUssYUFBYSxNQUFNWCxPQUFPWSxnQkFBZ0IsQ0FBQztZQUMvQ0MsT0FBTztZQUNQQyxRQUFRQyxlQUFlUjtZQUN2QlMsYUFBYTtZQUNiQyxZQUFZO1lBQ1pDLE9BQU87WUFDUEMsbUJBQW1CO1lBQ25CQyxrQkFBa0I7UUFDcEI7UUFDQWxCLElBQUlDLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRWlCLFFBQVFWLFdBQVdXLElBQUksQ0FBQ0MsT0FBTyxDQUFDLEVBQUUsQ0FBQ0MsSUFBSTtRQUFDO0lBQ2pFLEVBQUUsT0FBTW5CLE9BQU87UUFDYixnRUFBZ0U7UUFDaEUsSUFBSUEsTUFBTW9CLFFBQVEsRUFBRTtZQUNsQkMsUUFBUXJCLEtBQUssQ0FBQ0EsTUFBTW9CLFFBQVEsQ0FBQ3RCLE1BQU0sRUFBRUUsTUFBTW9CLFFBQVEsQ0FBQ0gsSUFBSTtZQUN4RHBCLElBQUlDLE1BQU0sQ0FBQ0UsTUFBTW9CLFFBQVEsQ0FBQ3RCLE1BQU0sRUFBRUMsSUFBSSxDQUFDQyxNQUFNb0IsUUFBUSxDQUFDSCxJQUFJO1FBQzVELE9BQU87WUFDTEksUUFBUXJCLEtBQUssQ0FBQyxDQUFDLCtCQUErQixFQUFFQSxNQUFNQyxPQUFPLENBQUMsQ0FBQztZQUMvREosSUFBSUMsTUFBTSxDQUFDLE1BQU1DLElBQUksQ0FBQztnQkFDcEJDLE9BQU87b0JBQ0xDLFNBQVM7Z0JBQ1g7WUFDRjtRQUNGLENBQUM7SUFDSDtBQUNGLENBQUM7QUFFRCxTQUFTUyxlQUFlUixTQUFTLEVBQUU7SUFDakMsT0FBTyxDQUFDO21FQUN5RCxFQUFFQSxVQUFVOzt5T0FFMEosQ0FBQztBQUMxTyxFQUdBLG9DQUFvQztDQUNwQyw4QkFBOEI7Q0FDOUIsK0RBQStEO0NBQy9ELG1FQUFtRTtDQUVuRSxjQUFjO0NBQ2QsbUVBQW1FO0NBQ25FLGNBQWM7Q0FDZCw0REFBNEQ7Q0FDNUQsK0JBQStCO0NBQy9CLFdBQVc7Q0FDWCxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFraS8uL3BhZ2VzL2FwaS9kYXRhX2V4dHJhY3Rvci50c3g/MDllZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25maWd1cmF0aW9uLCBPcGVuQUlBcGkgfSBmcm9tIFwib3BlbmFpXCI7XG5cbmNvbnN0IGNvbmZpZ3VyYXRpb24gPSBuZXcgQ29uZmlndXJhdGlvbih7XG4gIGFwaUtleTogcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVksXG59KTtcbmNvbnN0IG9wZW5haSA9IG5ldyBPcGVuQUlBcGkoY29uZmlndXJhdGlvbik7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICBpZiAoIWNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgZXJyb3I6IHtcbiAgICAgICAgbWVzc2FnZTogXCJPcGVuQUkgQVBJIGtleSBub3QgY29uZmlndXJlZCwgcGxlYXNlIGZvbGxvdyBpbnN0cnVjdGlvbnMgaW4gUkVBRE1FLm1kXCIsXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbmFycmF0aXZlID0gcmVxLmJvZHkubmFycmF0aXZlIHx8ICcnOyAvL2FuaW1hbCAtLT4gY2FzZV9ub3RlIG5hcnJhdGl2ZVxuICBpZiAobmFycmF0aXZlLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBlcnJvcjoge1xuICAgICAgICBtZXNzYWdlOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIG5hcnJhdGl2ZVwiLFxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgY29tcGxldGlvbiA9IGF3YWl0IG9wZW5haS5jcmVhdGVDb21wbGV0aW9uKHtcbiAgICAgIG1vZGVsOiBcInRleHQtZGF2aW5jaS0wMDJcIixcbiAgICAgIHByb21wdDogZ2VuZXJhdGVQcm9tcHQobmFycmF0aXZlKSwgLy9hbmltYWwgLS0+IGNhc2Ugbm90ZSBuYXJhdGl2ZVxuICAgICAgdGVtcGVyYXR1cmU6IDAuNSxcbiAgICAgIG1heF90b2tlbnM6IDIwMDAsXG4gICAgICB0b3BfcDogMSxcbiAgICAgIGZyZXF1ZW5jeV9wZW5hbHR5OiAwLFxuICAgICAgcHJlc2VuY2VfcGVuYWx0eTogMFxuICAgIH0pO1xuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgcmVzdWx0OiBjb21wbGV0aW9uLmRhdGEuY2hvaWNlc1swXS50ZXh0IH0pO1xuICB9IGNhdGNoKGVycm9yKSB7XG4gICAgLy8gQ29uc2lkZXIgYWRqdXN0aW5nIHRoZSBlcnJvciBoYW5kbGluZyBsb2dpYyBmb3IgeW91ciB1c2UgY2FzZVxuICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvci5yZXNwb25zZS5zdGF0dXMsIGVycm9yLnJlc3BvbnNlLmRhdGEpO1xuICAgICAgcmVzLnN0YXR1cyhlcnJvci5yZXNwb25zZS5zdGF0dXMpLmpzb24oZXJyb3IucmVzcG9uc2UuZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHdpdGggT3BlbkFJIEFQSSByZXF1ZXN0OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICByZXMuc3RhdHVzKDIwMDApLmpzb24oe1xuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIG1lc3NhZ2U6ICdBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgeW91ciByZXF1ZXN0LicsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVByb21wdChuYXJyYXRpdmUpIHtcbiAgcmV0dXJuIGBVc2luZyBlbl9jb3JlX3NjaV9sZyB2ZXJzaW9uIDAuNS4xLCBcbiAgaWRlbnRpZnkgYW5kIGNsYXNzaWZ5IHRoZSBkYXRhIGZvdW5kIGluIGEgcGF0aWVudCBjYXNlIG5hcnJhdGl2ZSAke25hcnJhdGl2ZX1cbiAgYmFzZWQgb24gdGhlIGxhYmVscyBTWU1QVE9NUywgTUVESUNBTF9ISVNUT1JZLCBQSFlTSUNBTF9FWEFNLCBNRURJQ0FUSU9OLCBUUkVBVE1FTlQsIFNPQ0lBTF9GQUNUT1IuIFxuICBSZXR1cm4gdGhlIHJlc3VsdCBhcyBhIGRpY3Rpb25hcnkgd2l0aCB0aGUgbGFiZWxzIGFzIGtleXMgKHdpdGggZWFjaCBrZXkgZW5jbG9zZWQgaW4gZG91YmxlIHFvdXRlcykgYW5kIGxpc3Qgb2YgZGF0YSBhcyB2YWx1ZXMgKHdpdGggZWFjaCB2YWx1ZSBlbmNsb3NlZCBpbiBkb3VibGUgcW91dGVzKS4gSWYgdGhlIGxhYmVsIGhhcyBubyBkYXRhIGFzc2lnbiBhbiBlbXB0eSBsaXN0IGFzIGl0cyB2YWx1ZS5gO1xufVxuXG5cbi8vIGZ1bmN0aW9uIGdlbmVyYXRlUHJvbXB0KGFuaW1hbCkge1xuLy8gICBjb25zdCBjYXBpdGFsaXplZEFuaW1hbCA9XG4vLyAgICAgYW5pbWFsWzBdLnRvVXBwZXJDYXNlKCkgKyBhbmltYWwuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcbi8vICAgcmV0dXJuIGBTdWdnZXN0IHRocmVlIG5hbWVzIGZvciBhbiBhbmltYWwgdGhhdCBpcyBhIHN1cGVyaGVyby5cblxuLy8gQW5pbWFsOiBDYXRcbi8vIE5hbWVzOiBDYXB0YWluIFNoYXJwY2xhdywgQWdlbnQgRmx1ZmZiYWxsLCBUaGUgSW5jcmVkaWJsZSBGZWxpbmVcbi8vIEFuaW1hbDogRG9nXG4vLyBOYW1lczogUnVmZiB0aGUgUHJvdGVjdG9yLCBXb25kZXIgQ2FuaW5lLCBTaXIgQmFya3MtYS1Mb3Rcbi8vIEFuaW1hbDogJHtjYXBpdGFsaXplZEFuaW1hbH1cbi8vIE5hbWVzOmA7XG4vLyB9XG5cblxuIl0sIm5hbWVzIjpbIkNvbmZpZ3VyYXRpb24iLCJPcGVuQUlBcGkiLCJjb25maWd1cmF0aW9uIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIk9QRU5BSV9BUElfS0VZIiwib3BlbmFpIiwicmVxIiwicmVzIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwibWVzc2FnZSIsIm5hcnJhdGl2ZSIsImJvZHkiLCJ0cmltIiwibGVuZ3RoIiwiY29tcGxldGlvbiIsImNyZWF0ZUNvbXBsZXRpb24iLCJtb2RlbCIsInByb21wdCIsImdlbmVyYXRlUHJvbXB0IiwidGVtcGVyYXR1cmUiLCJtYXhfdG9rZW5zIiwidG9wX3AiLCJmcmVxdWVuY3lfcGVuYWx0eSIsInByZXNlbmNlX3BlbmFsdHkiLCJyZXN1bHQiLCJkYXRhIiwiY2hvaWNlcyIsInRleHQiLCJyZXNwb25zZSIsImNvbnNvbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/data_extractor.tsx\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/data_extractor.tsx"));
module.exports = __webpack_exports__;

})();